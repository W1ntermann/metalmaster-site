import { makeWebhookService } from '@/services/makeWebhook';

/**
 * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Make webhook —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —É –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
 */

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
(window as any).testMakeWebhook = {
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π webhook
   */
  isConfigured: () => {
    const configured = makeWebhookService.isConfigured();
    console.log('üîß Make webhook configured:', configured);
    if (!configured) {
      console.log('‚ÑπÔ∏è –î–æ–¥–∞–π—Ç–µ VITE_MAKE_WEBHOOK_URL –≤ .env —Ñ–∞–π–ª');
    }
    return configured;
  },

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π URL webhook (–¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏)
   */
  getUrl: () => {
    const url = makeWebhookService.getWebhookUrl();
    console.log('üîó Current webhook URL:', url);
    return url;
  },

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
   */
  sendTestData: async () => {
    console.log('üöÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');
    
    const testData = {
      name: "–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç",
      phone: "+380931234567",
      question: "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±—Ä–∞—É–∑–µ—Ä–∞",
      timestamp: new Date().toLocaleString('uk-UA', { 
        timeZone: 'Europe/Kiev',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      }),
      source: "browser-test",
      utm_source: "test",
      utm_medium: "console",
      utm_campaign: "debug",
      page_url: window.location.href
    };

    try {
      const result = await makeWebhookService.sendToMake(testData);
      
      if (result.success) {
        console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!', result);
      } else {
        console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è:', result.error);
      }
      
      return result;
    } catch (error) {
      console.error('üí• –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É:', error);
      return { success: false, error: error };
    }
  },

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–∞—Å—Ç–æ–º–Ω—ñ –¥–∞–Ω—ñ
   */
  sendCustomData: async (data: any) => {
    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', data);
    
    try {
      const result = await makeWebhookService.sendToMake(data);
      console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    } catch (error) {
      console.error('üí• –ü–æ–º–∏–ª–∫–∞:', error);
      return { success: false, error: error };
    }
  },

  /**
   * –ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
   */
  help: () => {
    console.log(`
üîß Make Webhook Test Utils

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

testMakeWebhook.isConfigured()     - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
testMakeWebhook.getUrl()          - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π URL
testMakeWebhook.sendTestData()    - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
testMakeWebhook.sendCustomData({...}) - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ñ –¥–∞–Ω—ñ
testMakeWebhook.help()            - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
> testMakeWebhook.isConfigured()
> testMakeWebhook.sendTestData()
> testMakeWebhook.sendCustomData({
    name: "–Ü–≤–∞–Ω",
    phone: "+380123456789",
    question: "–¢–µ—Å—Ç"
  })

–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ VITE_MAKE_WEBHOOK_URL –≤ .env —Ñ–∞–π–ª—ñ!
    `);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –¥–æ–≤—ñ–¥–∫—É –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
console.log('üéØ Make Webhook Test Utils –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ! –í–≤–µ–¥—ñ—Ç—å testMakeWebhook.help() –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏');

export default (window as any).testMakeWebhook;
