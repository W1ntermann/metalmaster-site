import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { MessageCircle, X, Phone, User, HelpCircle, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useContactPopup } from "@/contexts/ContactPopupContext";

// URL –≤–∞—à–æ–≥–æ Google Apps Script Web App
const GOOGLE_SCRIPT_URL = "YOUR_GOOGLE_SCRIPT_URL_HERE";

const ContactPopup = () => {
  const { isOpen, closePopup } = useContactPopup();
  const [internalIsOpen, setInternalIsOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    question: ""
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ø–æ–≤–Ω—é–≤–∞–≤ —Ñ–æ—Ä–º—É
    const hasSubmitted = localStorage.getItem('contactFormSubmitted');
    const lastShown = localStorage.getItem('popupLastShown');
    const now = Date.now();
    
    if (hasSubmitted) {
      setIsSubmitted(true);
      return;
    }

    // –Ø–∫—â–æ popup –ø–æ–∫–∞–∑—É–≤–∞–≤—Å—è –º–µ–Ω—à–µ –Ω—ñ–∂ 10 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É, –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
    if (lastShown && (now - parseInt(lastShown)) < 600000) { // 10 —Ö–≤–∏–ª–∏–Ω
      return;
    }

    let hasShown = false;
    let timeoutId: number;
    
    const handleScroll = () => {
      if (hasShown || isSubmitted || internalIsOpen || isOpen) return;
      
      const scrollPercent = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
      
      if (scrollPercent > 40) { // –ó–±—ñ–ª—å—à–∏–≤ –ø–æ—Ä—ñ–≥ –¥–æ 40%
        setInternalIsOpen(true);
        hasShown = true;
        localStorage.setItem('popupLastShown', now.toString());
      }
    };

    // –ü–æ–∫–∞–∑–∞—Ç–∏ popup —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ (–∑–±—ñ–ª—å—à–∏–≤ —á–∞—Å)
    timeoutId = setTimeout(() => {
      if (!hasShown && !isSubmitted && !internalIsOpen && !isOpen) {
        setInternalIsOpen(true);
        hasShown = true;
        localStorage.setItem('popupLastShown', now.toString());
      }
    }, 30000);

    window.addEventListener('scroll', handleScroll, { passive: true });

    return () => {
      window.removeEventListener('scroll', handleScroll);
      if (timeoutId) clearTimeout(timeoutId);
    };
  }, [isSubmitted, internalIsOpen, isOpen]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      const dataToSend = {
        name: formData.name,
        phone: formData.phone,
        question: formData.question || "–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ",
        timestamp: new Date().toLocaleString('uk-UA', { 
          timeZone: 'Europe/Kiev',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        }),
        source: window.location.pathname
      };

      // ‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø: –í–∏–≤–æ–¥–∏–º–æ –¥–∞–Ω—ñ –≤ –∫–æ–Ω—Å–æ–ª—å
      console.log('üìã –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', dataToSend);
      console.log('üîó Google Script URL:', GOOGLE_SCRIPT_URL);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π URL
      if (GOOGLE_SCRIPT_URL === "YOUR_GOOGLE_SCRIPT_URL_HERE") {
        console.warn('‚ö†Ô∏è –£–í–ê–ì–ê: Google Script URL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!');
        console.log('‚úÖ –§–æ—Ä–º–∞ –ø—Ä–∞—Ü—é—î! –î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', dataToSend);
        
        // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ —É—Å–ø—ñ—Ö –Ω–∞–≤—ñ—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ URL
        setIsSubmitted(true);
        localStorage.setItem('contactFormSubmitted', 'true');
        localStorage.setItem('contactFormData', JSON.stringify(formData));
        
        toast({
          title: "‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!",
          description: "–î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Google Script URL –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.",
        });
        
        setTimeout(() => {
          setInternalIsOpen(false);
          closePopup();
        }, 3000);
        
        return;
      }

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö —É Google –¢–∞–±–ª–∏—Ü—é
      console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö...');
      await fetch(GOOGLE_SCRIPT_URL, {
        method: 'POST',
        mode: 'no-cors', // –í–∞–∂–ª–∏–≤–æ –¥–ª—è Google Apps Script
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSend)
      });

      // –ó mode: 'no-cors' –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å,
      // —Ç–æ–º—É –≤–≤–∞–∂–∞—î–º–æ —â–æ –≤—Å–µ –æ–∫, —è–∫—â–æ –Ω–µ –±—É–ª–æ –ø–æ–º–∏–ª–∫–∏
      console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—é!');
      
      setIsSubmitted(true);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage, —â–æ —Ñ–æ—Ä–º–∞ –±—É–ª–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞
      localStorage.setItem('contactFormSubmitted', 'true');
      localStorage.setItem('contactFormData', JSON.stringify(formData));
      
      toast({
        title: "–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        description: "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
      });
      
      // –ó–∞–∫—Ä–∏—Ç–∏ popup —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
      setTimeout(() => {
        setInternalIsOpen(false);
        closePopup();
      }, 3000);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏:', error);
      console.error('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏",
        description: "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleClose = (open: boolean) => {
    if (!open) {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è popup
      localStorage.setItem('popupLastShown', Date.now().toString());
      setInternalIsOpen(false);
      closePopup();
    } else {
      setInternalIsOpen(true);
    }
  };

  // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ popup —è–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∞–±–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω
  const shouldBeOpen = isOpen || internalIsOpen;

  return (
    <Dialog open={shouldBeOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md mx-auto bg-card border-border shadow-glow">
        <DialogHeader className="text-center space-y-4">
          <div className="mx-auto w-16 h-16 bg-gradient-laser rounded-full flex items-center justify-center">
            <HelpCircle className="h-8 w-8 text-primary-foreground" />
          </div>
          <DialogTitle className="text-2xl font-bold text-foreground">
            –í–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è?
          </DialogTitle>
          <p className="text-muted-foreground">
            –ó–∞–ª–∏—à—ñ—Ç—å –∑–∞—è–≤–∫—É —ñ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω
          </p>
        </DialogHeader>

        {!isSubmitted ? (
          <form onSubmit={handleSubmit} className="space-y-6 mt-6">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-foreground font-medium">
                –í–∞—à–µ —ñ–º'—è *
              </Label>
              <div className="relative">
                <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  id="name"
                  type="text"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className="pl-10 bg-background border-border focus:ring-primary"
                  required
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="phone" className="text-foreground font-medium">
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É *
              </Label>
              <div className="relative">
                <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  id="phone"
                  type="tel"
                  placeholder="+380 (XX) XXX-XX-XX"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  className="pl-10 bg-background border-border focus:ring-primary"
                  required
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="question" className="text-foreground font-medium">
                –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è
              </Label>
              <Textarea
                id="question"
                placeholder="–û–ø–∏—à—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å..."
                value={formData.question}
                onChange={(e) => handleInputChange('question', e.target.value)}
                className="bg-background border-border focus:ring-primary min-h-[100px] resize-none"
                rows={4}
              />
            </div>

            <div className="flex gap-3">
              <Button 
                type="submit" 
                variant="hero" 
                className="flex-1"
                disabled={!formData.name || !formData.phone || isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –í—ñ–¥–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <MessageCircle className="h-4 w-4 mr-2" />
                    –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
                  </>
                )}
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => handleClose(false)}
                className="px-4"
                aria-label="–ó–∞–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É"
                disabled={isLoading}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>

            <p className="text-xs text-muted-foreground text-center">
              –ù–∞—Ç–∏—Å–∫–∞—é—á–∏ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏", –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            </p>
          </form>
        ) : (
          <div className="text-center space-y-4 py-8">
            <div className="mx-auto w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center">
              <MessageCircle className="h-8 w-8 text-green-500" />
            </div>
            <h3 className="text-xl font-semibold text-foreground">
              –î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!
            </h3>
            <p className="text-muted-foreground">
              –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º
            </p>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default ContactPopup;
